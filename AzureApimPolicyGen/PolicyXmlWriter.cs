using System.Xml;

namespace AzureApimPolicyGen;

internal sealed class PolicyXmlWriter : IDisposable
{
    private XmlWriter _xmlWriter;
    public bool _baseCalled;

    private static XmlWriterSettings XmlOptions = new XmlWriterSettings
    {
        Indent = true,
        OmitXmlDeclaration = true,
        ConformanceLevel = ConformanceLevel.Document,
    };

    public PolicyXmlWriter(string filePath)
    {
        _xmlWriter = XmlWriter.Create(filePath, XmlOptions);
        _xmlWriter.WriteComment($" Generated by AzureApimPolicyGen v1. ({DateTime.Now}) ");
        _xmlWriter.WriteStartElement("policies");
    }

    public void Base()
    {
        if (_baseCalled) return;

        _xmlWriter.WriteStartElement("base");
        _xmlWriter.WriteEndElement();
        _baseCalled = true;
    }

    public void Inbound()
    {
        StartPhase("inbound");
    }

    public void Backend()
    {
        StartPhase("backend");
    }


    public void Outbound()
    {
        StartPhase("outbound");
    }

    public void OnError()
    {
        StartPhase("on-error");
    }

    public void EndElement()
    {
        if (!_baseCalled)
            _xmlWriter.WriteComment($" WARNING: Base was not called. Upstream policies will NOT be executed. ");

        _xmlWriter.WriteEndElement();
    }

    public void Close()
    {
        _xmlWriter.WriteFullEndElement();
        _xmlWriter.Flush();
        _xmlWriter.Close();
    }

    public void Dispose()
        => _xmlWriter.Dispose();

    private void StartPhase(string name)
    {
        _baseCalled = false;
        _xmlWriter.WriteStartElement(name);
    }

    // Authentication

    public void AuthenticationBasic(string username, string password)
    {
        _xmlWriter.WriteStartElement("authentication-basic");
        _xmlWriter.WriteAttributeString("username", username);
        _xmlWriter.WriteAttributeString("password", password);
        _xmlWriter.WriteEndElement();
    }

    public void AuthenticationCertificate(string? thumbprint, string? certificate, string? body, string? password)
    {
        _xmlWriter.WriteStartElement("authentication-certificate");
        _xmlWriter.WriteAttributeStringOpt("thumbprint", thumbprint);
        _xmlWriter.WriteAttributeStringOpt("certificate", certificate);
        _xmlWriter.WriteAttributeStringOpt("body", body);
        _xmlWriter.WriteAttributeStringOpt("password", password);
        _xmlWriter.WriteEndElement();
    }

    public void AuthenticationManagedIdentity(string resource, string? clientId, string? outputTokenVariableName, bool ignoreError)
    {
        _xmlWriter.WriteStartElement("authentication-managed-identity");
        _xmlWriter.WriteAttributeString("resource", resource);
        _xmlWriter.WriteAttributeStringOpt("client-id", clientId);
        _xmlWriter.WriteAttributeStringOpt("output-token-variable-name", outputTokenVariableName);
        _xmlWriter.WriteAttributeString("ignore-error", ignoreError ? "true" : "false");
        _xmlWriter.WriteEndElement();
    }

    // Cache

    public void CacheLookup(string varyByDeveloper, string varyByDeveloperGroups, string? allowPrivateResponseCaching,
        string? cacheType, string? downstreamCacheType, string? mustRevalidate, Action? varyBy)
    {
        _xmlWriter.WriteStartElement("cache-lookup");
        _xmlWriter.WriteAttributeString("vary-by-developer", varyByDeveloper);
        _xmlWriter.WriteAttributeString("vary-by-developer-groups", varyByDeveloperGroups);
        _xmlWriter.WriteAttributeStringOpt("allow-private-response-caching", allowPrivateResponseCaching);
        _xmlWriter.WriteAttributeStringOpt("caching-type", cacheType);
        _xmlWriter.WriteAttributeStringOpt("downstream-caching-type", downstreamCacheType);
        _xmlWriter.WriteAttributeStringOpt("must-revalidate", mustRevalidate);
        if (varyBy is not null) varyBy();
        _xmlWriter.WriteEndElement();
    }
    public void CacheLookup_VaryByHeader(string name)
        => _xmlWriter.WriteElementString("vary-by-header", name);
    public void CacheLookup_VaryByParam(string nameOrNames)
        => _xmlWriter.WriteElementString("vary-by-query-parameter", nameOrNames);
}

internal static class XmlWriterExtensions
{
    public static void WriteAttributeStringOpt(this XmlWriter xmlWriter, string name, string? value)
    {
        if (!String.IsNullOrEmpty(value))
            xmlWriter.WriteAttributeString(name, value);
    }
}