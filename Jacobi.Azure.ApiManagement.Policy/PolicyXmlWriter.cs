using System.Reflection;
using System.Xml;

namespace Jacobi.Azure.ApiManagement.Policy;

internal sealed partial class PolicyXmlWriter : IDisposable
{
    private XmlWriter _xmlWriter;
    public bool _baseCalled;

    private static XmlWriterSettings XmlOptions = new()
    {
        Indent = true,
        OmitXmlDeclaration = true,
        ConformanceLevel = ConformanceLevel.Document,
    };

    public PolicyXmlWriter(Stream stream)
    {
        var assemblyName = Assembly.GetExecutingAssembly().GetName();
        _xmlWriter = XmlWriter.Create(stream, XmlOptions);
        _xmlWriter.WriteComment($" Generated by {assemblyName.Name} v{assemblyName.Version}. (Utc: {DateTime.UtcNow}) ");
        _xmlWriter.WriteStartElement("policies");
    }

    public void Base()
    {
        if (_baseCalled) return;

        _xmlWriter.WriteStartElement("base");
        _xmlWriter.WriteEndElement();
        _baseCalled = true;
    }

    public void Inbound(Action inbound)
    {
        StartSection("inbound");
        inbound();
        EndElement();
    }

    public void Backend(Action backend)
    {
        StartSection("backend");
        backend();
        EndElement();
    }


    public void Outbound(Action outbound)
    {
        StartSection("outbound");
        outbound();
        EndElement();
    }

    public void OnError(Action onError)
    {
        StartSection("on-error");
        onError();
        EndElement();
    }

    public void Close()
    {
        _xmlWriter.WriteFullEndElement();
        _xmlWriter.Flush();
        _xmlWriter.Close();
    }

    public void Dispose()
        => _xmlWriter.Dispose();

    private void StartSection(string name)
    {
        _baseCalled = false;
        _xmlWriter.WriteStartElement(name);
    }

    private void EndElement()
    {
        if (!_baseCalled)
            _xmlWriter.WriteComment($" WARNING: Base was not called. Upstream policies will NOT be executed. ");

        _xmlWriter.WriteEndElement();
    }

    private static string? BoolValue(bool? value)
    {
        if (value.HasValue)
            return value.Value ? "true" : "false";
        return null;
    }
}

internal static class XmlWriterExtensions
{
    public static void WriteAttributeStringOpt(this XmlWriter xmlWriter, string name, string? value)
    {
        if (!String.IsNullOrEmpty(value))
            xmlWriter.WriteAttributeString(name, value);
    }
}